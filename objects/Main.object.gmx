<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
draw_set_font(Font);

// states
STATE_NONE = 0;
STATE_MENU = 1;
STATE_EDIT = 2;
STATE_PLAY = 3;

STATE = STATE_EDIT;

// temp player
player_x = room_width/2;
player_y = room_height/2;

// STATE_EDIT
edit_mouseover = -1;
edit_xx = (room_width * 0.775)+16+16;
edit_yy = 16+(4*64)+16+16;
edit_selected = 1;
edit_last_xx = -1;
edit_last_yy = -1;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tiles
Tiles = wtile_init();
var surface = wtile_begin();

wtile_add(Tiles, surface, true, "empty void", "How can it be so impossibly empty?");
// todo create a wrapper function that adds them to a list that is then iterated and added to the tile table

wtile_add_all(Tiles, surface);

wtile_end(surface);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///World
World = ds_grid_create(45, 45);

for (var i = 0; i &lt; 45; ++i)
{
    for (var j = 0; j &lt; 45; ++j)
    {
        ds_grid_add(World, i, j, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord("Z")))
{
    STATE = (STATE+1) % 4;
}

// player
player_x += (keyboard_check(ord("D"))-keyboard_check(ord("A")))*4;
player_y += (keyboard_check(ord("S"))-keyboard_check(ord("W")))*4;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATE_EDIT
if (STATE != STATE_EDIT)
    exit;
    
/* problem: sprite list isn't square, potential holes, so we have to check for them anyway
if (mouse_x &gt; (room_width * 0.775)+16+16 &amp;&amp;
    mouse_x &lt; room_width-16-16 &amp;&amp;
    mouse_y &gt; 16+(4*64)+16+16 &amp;&amp;
    mouse_y &lt;)
*/

var mouse_xx = floor(mouse_x/16);
var mouse_yy = floor(mouse_y/16);
var tile_xx = mouse_xx - (edit_xx/16);
var tile_yy = mouse_yy - (edit_yy/16);
var tile_index = tile_xx + (tile_yy * wtile_sheet_width);

if (tile_index &gt;= 0 &amp;&amp; tile_index &lt; ds_list_size(Tiles) &amp;&amp; tile_xx &gt;= 0 &amp;&amp; tile_yy &gt;= 0)
{
    edit_mouseover = tile_index;
    
    if (mouse_check_button_pressed(mb_left))
    {
        edit_selected = tile_index;
    }
}
else
{
    edit_mouseover = -1;
}

if (mouse_xx &gt;= 0 &amp;&amp; mouse_yy &gt;= 0 &amp;&amp; mouse_xx &lt; ds_grid_width(World) &amp;&amp; mouse_yy &lt; ds_grid_height(World))
{
    // in
    if (mouse_check_button(mb_middle))
    {
        ds_grid_set(World, mouse_xx, mouse_yy, irandom(ds_list_size(Tiles)-1));
    }
    else if (tile_xx != edit_last_xx &amp;&amp; tile_yy != edit_last_yy)
    {
        if (mouse_check_button(mb_left))
        {
            ds_grid_set(World, mouse_xx, mouse_yy, edit_selected);//(ds_grid_get(World, mouse_xx, mouse_yy)+1) % ds_list_size(Tiles));
            edit_last_xx = mouse_xx;
            edit_last_yy = mouse_yy;
        }
        else if (mouse_check_button(mb_right))
        {
            edit_selected = ds_grid_get(World, mouse_xx, mouse_yy);
            edit_last_xx = mouse_xx;
            edit_last_yy = mouse_yy;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI

var gui_xx = room_width * 0.775; // its 992, 288 left over
draw_rectangle(gui_xx, 0, room_width, room_height, false);

// Minimap
var default_color = draw_get_color();
var tile_color = 0;

for (var i = 0; i &lt; 64; ++i)
{
    for (var j = 0; j &lt; 64; ++j)
    {
        if (i &lt; ds_grid_width(World) &amp;&amp; j &lt; ds_grid_height(World))
        {
            tile_color = ds_list_find_value(ds_list_find_value(Tiles, ds_grid_get(World, i, j)), 0);
        }
        draw_set_color(make_colour_hsv((tile_color/ds_list_size(Tiles))*255, 255, 255));
        draw_rectangle(gui_xx+16+(i*4), 0+16+(j*4), gui_xx+16+(i*4)+4, 0+16+(j*4)+4, false);
    }
}
draw_set_color(default_color);

// player (temp)
draw_sprite(ds_list_find_value(ds_list_find_value(Tiles, 1), 1), 0, player_x, player_y);

// text
text_xx = room_width-16-16;// right-aligned inset 2 blocks for border and whitespace
text_yy = 16+(4*64)+16+16 // from top, border, minimap (4 pixels x 64 tiles), border, whitespace

draw_text_outlined(gui_xx+2, 2, "GMS Collab Project - " + string(fps) + " / " + string(room_speed) + " (" + string(delta_time/1000) + ")", c_white, 1, c_black);
draw_set_halign(fa_right);
draw_text_outlined(room_width-2, 2, "State: " + string(state_get(STATE)), c_white, 1, c_black);
draw_set_halign(fa_left);
//for (var i = 0; i &lt; ds_list_size(Tiles); ++i)
//{
    // account for sprite size
//    draw_sprite(ds_list_find_value(ds_list_find_value(Tiles, i), 1), 0, text_xx-16, text_yy+((i+1)*16));
//    draw_text_outlined(text_xx-16, text_yy+((i+1)*16), ds_list_find_value(ds_list_find_value(Tiles, i), 3), c_white, 1, c_black);
//}
//draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///World
for (var i = 0; i &lt; ds_grid_width(World); ++i)
{
    for (var j = 0; j &lt; ds_grid_height(World); ++j)
    {
        draw_sprite(ds_list_find_value(ds_list_find_value(Tiles, ds_grid_get(World, i, j)), 1), 0, i*16, j*16);
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATE_EDIT
if (STATE != STATE_EDIT)
    exit;

draw_text_outlined(edit_xx-16, edit_yy-16, string(ds_list_size(Tiles)), c_white, 1, c_black);
draw_text_outlined(edit_xx-16, room_height-16-16-16-16, "Right Click tile to select#Right places#Middle randomizes#Left removes (sets to void)", c_white, 1, c_black);

if (edit_mouseover != -1 || edit_selected != -1)
{
    var tile_index = max(edit_mouseover, edit_selected);
    draw_text_outlined(edit_xx, edit_yy-16, ds_list_find_value(ds_list_find_value(Tiles, tile_index), 3), c_white, 1, c_black);
}

for (var i = 0; i &lt; ds_list_size(Tiles); ++i)
{
    var offset_xx = (i % wtile_sheet_width)*16;
    var offset_yy = floor(i / wtile_sheet_width)*16;
    draw_sprite(ds_list_find_value(ds_list_find_value(Tiles, i), 1), 0, edit_xx+offset_xx, edit_yy+offset_yy);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
