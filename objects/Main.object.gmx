<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEMP/TESTING
player_x = 24;
player_y = 24;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
draw_set_font(Font);

Debug = false;

// states
STATE_NONE = 0;
STATE_MENU = 1;
STATE_EDIT = 2;
STATE_PLAY = 3;

STATE = STATE_EDIT;

// STATE_EDIT
edit_mouseover = -1;
edit_xx = (room_width * 0.775)+16+16;
edit_yy = 16+(4*64)+16+16;
edit_selected = 1;
edit_last_xx = -1;
edit_last_yy = -1;

winit();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///VIEWPORT
// Game World is limited to being drawn within these bounds.
Worldport[0, 0] = 0;
Worldport[0, 1] = 0;
Worldport[1, 0] = 992;
Worldport[1, 1] = 720;
Worldportanchored = false;
Worldportanchor[0, 0] = 0;
Worldportanchor[0, 1] = 0;
Worldportanchor[1, 0] = 0;
Worldportanchor[1, 1] = 0;
// Internal view
Worldview[0] = 0;//Worldview[0] = (ds_grid_width(World)*8)-(992/2)//floor((992/16)/2)*16;
Worldview[1] = 0;//Worldview[1] = (ds_grid_height(World)*8)-(720/2)//floor((720/16)/2)*16;
Worldviewanchored = false;
Worldviewanchor[0] = 0;
Worldviewanchor[1] = 0;
// Viewport position (WHY???)
Worldposition[0] = 0;
Worldposition[1] = 0;
Worldpositionanchored = false;
Worldpositionanchor[0] = 0;
Worldpositionanchor[1] = 0;

//
Pullview = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OBJECTS
//Objects = ds_list_create()

//object = ds_list_create();

//ds_list_add(Objects, 0);  // id, x, y

//ds_grid_add(World, object);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///World
World = ds_grid_create(64, 64);
ds_grid_clear(World, 8);

for (var i = 0; i &lt; 16; ++i)
{
    ds_grid_add(World, 12+i, 12, 1);
    ds_grid_add(World, 12, 12+i, 1);
    ds_grid_add(World, 12+i, 12+16, 1);
}

wlight_refresh(24, 24, 64);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEMP/TESTING

player_x += keyboard_check_pressed(ord("D")) - keyboard_check_pressed(ord("A"));
player_y += keyboard_check_pressed(ord("S")) - keyboard_check_pressed(ord("W"));

if (keyboard_check_pressed(ord("R")) ||
    keyboard_check_pressed(ord("W")) ||
    keyboard_check_pressed(ord("A")) ||
    keyboard_check_pressed(ord("S")) ||
    keyboard_check_pressed(ord("D")))
{
    //ds_grid_clear(Light, 0);
    wlight_refresh(player_x, player_y, 64);
    //wlight_refresh(36, 36, 16);
}

if (keyboard_check_pressed(ord("T")))
{
    var temp = Light;
    Light = LightDelta;
    LightDelta = temp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (keyboard_key != keyboard_lastkey)
//{
//    show_debug_message(keyboard_lastkey);
//}

if (keyboard_check_pressed(192)) //~
{
    Debug = !Debug;
}

if (keyboard_check_pressed(ord("C")))
{
    ds_grid_clear(World, 8);
    //ds_grid_clear(Light, 0.5);
}
/*
if (keyboard_check_pressed(ord("L")))
{
    var data = clipboard_get_text();
    var index = 0;
    
    for (var i = 0; i &lt; ds_grid_width(World); ++i)
    {
        for (var j = 0; j &lt; ds_grid_height(World); ++j)
        {
            ds_grid_set(World, i, j, real(string_char_at(data, ++index)));
        }
    }
}

if (keyboard_check_pressed(ord("O")))
{
    var data = "";
    
    for (var i = 0; i &lt; ds_grid_width(World); ++i)
    {
        for (var j = 0; j &lt; ds_grid_height(World); ++j)
        {
            data += string(ds_grid_get(World, i, j));
        }
    }
    
    clipboard_set_text(data);
}
*/
if (keyboard_check_pressed(ord("Z")))
{
    STATE = (STATE+1) % 4;
}

if (keyboard_check(vk_space))
{
    if (!Worldviewanchored)
    {
        Worldviewanchor[0] = Worldview[0]+mouse_x;
        Worldviewanchor[1] = Worldview[1]+mouse_y;
        Worldviewanchored = true;
    }
    Worldview[0] = Worldviewanchor[0]-mouse_x;
    Worldview[1] = Worldviewanchor[1]-mouse_y;
}
else
{
    Worldviewanchored = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATE_EDIT
if (STATE != STATE_EDIT)
    exit;

var mouse_xx = floor(mouse_x/16);
var mouse_yy = floor(mouse_y/16);
var tile_xx = mouse_xx - (edit_xx/16);
var tile_yy = mouse_yy - (edit_yy/16);
var tile_index = tile_xx + (tile_yy * wtile_sheet_width);
var tile_xmax = ds_grid_height(World);
var tile_ymax = ds_grid_width(World)
var world_mouse_x = floor(mouse_x + Worldview[0] - Worldposition[0])/16;
var world_mouse_y = floor(mouse_y + Worldview[1] - Worldposition[1])/16;

if (tile_index &gt;= 0 &amp;&amp; tile_index &lt; ds_list_size(Tiles) &amp;&amp; tile_xx &gt;= 0 &amp;&amp; tile_yy &gt;= 0)
{
    edit_mouseover = tile_index;
    
    if (mouse_check_button_pressed(mb_left))
    {
        edit_selected = tile_index;
    }
}
else
{
    edit_mouseover = -1;
}

if (world_mouse_x &gt;= max(floor((Worldport[0, 0]/16)+(Worldview[0]/16)), 0) &amp;&amp;
    world_mouse_y &gt;= max(floor((Worldport[0, 1]/16)+(Worldview[1]/16)), 0) &amp;&amp;
    world_mouse_x &lt; min(ceil((Worldport[1, 0]/16)+(Worldview[0]/16)), tile_xmax) &amp;&amp;
    world_mouse_y &lt; min(ceil((Worldport[1, 1]/16)+(Worldview[1]/16)), tile_ymax))
{
    if (keyboard_check(ord("B")))
    {
        ds_grid_set_disk(World, world_mouse_x, world_mouse_y, 4, edit_selected);
    }

    if (mouse_check_button(mb_middle))
    {
        ds_grid_set(World, world_mouse_x, world_mouse_y, irandom(ds_list_size(Tiles)-1));
    }
    else if (tile_xx != edit_last_xx &amp;&amp; tile_yy != edit_last_yy)
    {
        if (mouse_check_button(mb_left))
        {
            ds_grid_set(World, world_mouse_x, world_mouse_y, edit_selected);
            edit_last_xx = world_mouse_x;
            edit_last_yy = world_mouse_y;
        }
        else if (mouse_check_button(mb_right))
        {
            ds_grid_set_disk(Light, world_mouse_x, world_mouse_y, 2, 1);
            edit_selected = ds_grid_get(World, world_mouse_x, world_mouse_y);
            edit_last_xx = world_mouse_x;
            edit_last_yy = world_mouse_y;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG

if (!Debug)
    exit;

if (keyboard_check(ord("1")))
{
    Worldport[0, 0] = clamp(mouse_x-Worldposition[0], 0, Worldport[1, 0]);
    Worldport[0, 1] = clamp(mouse_y-Worldposition[1], 0, Worldport[1, 1]);
    
    /*if (mouse_x-Worldposition[0]+Worldview[0] &lt; 0 || mouse_y-Worldposition[1]+Worldview[1] &lt; 0 ||
        mouse_x-Worldposition[0] &lt; 0 || mouse_y-Worldposition[1] &lt; 0)
    {
        Pullview = true;
    }
    else
    {
        Pullview = false;
    }*/
}
/*else
{
    Pullview = false;
}
//else
if (Pullview)
{
    var mx = min(mouse_x-Worldposition[0]+Worldview[0], 0);
    var my = min(mouse_y-Worldposition[1]+Worldview[1], 0);
    show_debug_message(mx);
    
    if (!Worldportanchored)
    {
        Worldportanchor[0] = Worldview[0]+mouse_x;//Worldposition[0]+Worldport[1, 0]//+mouse_x;
        Worldportanchor[1] = Worldview[1]+mouse_y;//Worldposition[1]+Worldport[1, 1]//+mouse_y;
        Worldviewanchor[0] = Worldport[1, 0]-mx;
        Worldviewanchor[1] = Worldport[1, 1]-my;
        Worldportanchored = true;
    }
    Worldview[0] = Worldportanchor[0]-mouse_x;
    Worldview[1] = Worldportanchor[1]-mouse_y;
    //Worldposition[0]
    Worldport[0, 0] = clamp(mouse_x-Worldposition[0], 0, Worldport[1, 0]);
    Worldport[0, 1] = clamp(mouse_y-Worldposition[1], 0, Worldport[1, 1]);
    Worldport[1, 0] = clamp(Worldviewanchor[0]-mx, Worldport[0, 0], ds_grid_width(World)*16);
    Worldport[1, 1] = clamp(Worldviewanchor[1]-my, Worldport[0, 1], ds_grid_height(World)*16);
    //Worldposition[0] = Worldportanchor[0]+mouse_x;
    //Worldposition[1] = Worldportanchor[1]+mouse_y;
}*/

if (keyboard_check(ord("2")))
{
    Worldport[1, 0] = clamp(mouse_x-Worldposition[0], Worldport[0, 0], ds_grid_width(World)*16);
    Worldport[1, 1] = clamp(mouse_y-Worldposition[1], Worldport[0, 1], ds_grid_height(World)*16);
}

/*if (keyboard_check(ord("3")))
{
    if (!Worldviewanchored)
    {
        Worldviewanchor[0] = Worldview[0]+mouse_x;
        Worldviewanchor[1] = Worldview[1]+mouse_y;
        Worldviewanchored = true;
    }
    Worldview[0] = Worldviewanchor[0]-mouse_x;
    Worldview[1] = Worldviewanchor[1]-mouse_y;
}
else
{
    Worldviewanchored = false;
}*/

if (keyboard_check(ord("4")))
{
    if (!Worldpositionanchored)
    {
        Worldpositionanchor[0] = Worldposition[0]-mouse_x;
        Worldpositionanchor[1] = Worldposition[1]-mouse_y;
        Worldpositionanchored = true;
    }
    Worldposition[0] = Worldpositionanchor[0]+mouse_x;
    Worldposition[1] = Worldpositionanchor[1]+mouse_y;
}
else
{
    Worldpositionanchored = false;
}

if (keyboard_check_pressed(ord("5")))
{
    // replace with world_init script
    Worldport[0, 0] = 0;
    Worldport[0, 1] = 0;
    Worldport[1, 0] = 992;
    Worldport[1, 1] = 720;
    Worldportanchored = false;
    Worldportanchor[0, 0] = 0;
    Worldportanchor[0, 1] = 0;
    Worldportanchor[1, 0] = 0;
    Worldportanchor[1, 1] = 0;
    
    Worldview[0] = 0;
    Worldview[1] = 0;
    Worldviewanchored = false;
    Worldviewanchor[0] = 0;
    Worldviewanchor[1] = 0;
    
    Worldposition[0] = 0;
    Worldposition[1] = 0;
    Worldpositionanchored = false;
    Worldpositionanchor[0] = 0;
    Worldpositionanchor[1] = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OBJECTS
if (keyboard_check_pressed(vk_up))
{
//    ds_list
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WORLD todo: vertex buffer
var original_alpha = draw_get_alpha()
for (var i = max(floor((Worldport[0,0]/16)+(Worldview[0]/16)), 0); i &lt; min(ceil((Worldport[1, 0]/16)+(Worldview[0]/16)), ds_grid_width(World))/*ds_grid_width(World)*/; ++i)
{
    for (var j = max(floor((Worldport[0,1]/16)+(Worldview[1]/16)), 0); j &lt; min(ceil((Worldport[1, 1]/16)+(Worldview[1]/16)), ds_grid_height(World))/*ds_grid_height(World)*/; ++j)
    {
        draw_set_alpha(ds_grid_get(Light, i, j));
        draw_sprite(ds_list_find_value(ds_list_find_value(Tiles, ds_grid_get(World, i, j)), 1), 0, Worldposition[0]-Worldview[0]+(i*16), Worldposition[1]-Worldview[1]+(j*16));
    }
}
draw_set_alpha(original_alpha);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI

var gui_xx = room_width * 0.775; // its 992, 288 left over
draw_rectangle(gui_xx, 0, room_width, room_height, false);

// Minimap
var default_color = draw_get_color();
var default_alpha = draw_get_alpha();
var tile_color = 0;

for (var i = 0; i &lt; 64; ++i)
{
    for (var j = 0; j &lt; 64; ++j)
    {
        if (ds_grid_get(Light, i, j) != -1)
        {
            tile_color = ds_list_find_value(ds_list_find_value(Tiles, ds_grid_get(World, i, j)), 0);
            draw_set_color(make_color_hsv((tile_color/ds_list_size(Tiles))*255, 255, 255));
            draw_set_alpha(ds_grid_get(Light, i, j));
            draw_rectangle(gui_xx+16+(i*4), 0+16+(j*4), gui_xx+16+(i*4)+4-1, 0+16+(j*4)+4-1, false);
        }
    }
}
draw_set_alpha(default_alpha);
draw_set_color(default_color);

// player (temp)
//draw_sprite(ds_list_find_value(ds_list_find_value(Tiles, 1), 1), 0, player_x, player_y);

// text
text_xx = room_width-16-16;// right-aligned inset 2 blocks for border and whitespace
text_yy = 16+(4*64)+16+16 // from top, border, minimap (4 pixels x 64 tiles), border, whitespace

//draw_text_outlined(gui_xx+2, 2, "GMS Collab Project - " + string(fps) + " / " + string(room_speed) + " (" + string(delta_time/1000) + ")", c_white, 1, c_black);
//draw_set_halign(fa_right);
//draw_text_outlined(room_width-2, 2, "State: " + string(state_get(STATE)), c_white, 1, c_black);
//draw_set_halign(fa_left);
//for (var i = 0; i &lt; ds_list_size(Tiles); ++i)
//{
    // account for sprite size
//    draw_sprite(ds_list_find_value(ds_list_find_value(Tiles, i), 1), 0, text_xx-16, text_yy+((i+1)*16));
//    draw_text_outlined(text_xx-16, text_yy+((i+1)*16), ds_list_find_value(ds_list_find_value(Tiles, i), 3), c_white, 1, c_black);
//}
//draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATE_EDIT
if (STATE != STATE_EDIT)
    exit;
  
/*draw_rectangle(Worldposition[0]-Worldview[0], Worldposition[1]-Worldview[1],
                Worldposition[0]-Worldview[0]+(ds_grid_width(World)*16),
                Worldposition[1]-Worldview[1]+(ds_grid_height(World)*16), true);*/
    
draw_text_outlined(edit_xx-16, edit_yy-16, string(ds_list_size(Tiles)), c_white, 1, c_black);
draw_set_valign(fa_bottom);
draw_text_outlined(edit_xx-16, room_height-16, "
Right Click tile to select

Right places
Middle randomizes
Left removes (sets to void)

O to save to clipboard
L to load from clipboard
C to clear world

1 sets top-left
2 sets bottom-right
3 moves the entire view
4 pans within the view
5 resets the entire view
", c_white, 1, c_black);
draw_set_valign(fa_top);

if (edit_mouseover != -1 || edit_selected != -1)
{
    var tile_index = ternary(edit_mouseover, edit_mouseover, edit_selected);
    draw_text_outlined(edit_xx, edit_yy-16, ds_list_find_value(ds_list_find_value(Tiles, tile_index), 3), c_white, 1, c_black);
}

for (var i = 0; i &lt; ds_list_size(Tiles); ++i)
{
    var offset_xx = (i % wtile_sheet_width)*16;
    var offset_yy = floor(i / wtile_sheet_width)*16;
    draw_sprite(ds_list_find_value(ds_list_find_value(Tiles, i), 1), 0, edit_xx+offset_xx, edit_yy+offset_yy);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEMP/TESTING
draw_rectangle(player_x*16, player_y*16, (player_x*16)+16, (player_y*16)+16, false);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
if (!Debug)
    exit;
    
var original_color = draw_get_color();
    
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(c_yellow);
draw_set_alpha(0.5);
for (var i = 0; i &lt; ds_grid_width(World); ++i)
{
    //draw_line(Worldposition[0]-Worldview[0]+(i*16), Worldposition[1]-Worldview[1],
    //          Worldposition[0]-Worldview[0]+(i*16), Worldposition[1]-Worldview[1]+(ds_grid_height(World)*16));
              
    //draw_line(Worldposition[0]-Worldview[0], Worldposition[1]-Worldview[1]+(i*16),
    //          Worldposition[0]-Worldview[0]+(ds_grid_width(World)*16), Worldposition[1]-Worldview[1]+(i*16));

    for (var j = 0; j &lt; ds_grid_height(World); ++j)
    {
        if (i == 0)
        {
            //draw_line(Worldposition[0]-Worldview[0], Worldposition[1]-Worldview[1]+(j*16),
            //          Worldposition[0]-Worldview[0]+(ds_grid_width(World)*16), Worldposition[1]-Worldview[1]+(j*16));
        }
        //draw_text(9+Worldposition[0]-Worldview[0]+(i*16), 9+Worldposition[1]-Worldview[1]+(j*16), ds_list_find_value(ds_list_find_value(Tiles, ds_grid_get(World, i, j)), 0));
        draw_text(9+Worldposition[0]-Worldview[0]+(i*16), 9+Worldposition[1]-Worldview[1]+(j*16), ds_grid_get(Light, i, j)*10);
    }
}
draw_set_alpha(1);
//draw_set_color(original_color);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_set_color(c_red);
if (Worldviewanchored)
{
    draw_text(mouse_x, mouse_y-12, string(Worldview[0]) + ", " + string(Worldview[1]) + " (" + string(Worldviewanchor[0]) + ", " + string(Worldviewanchor[1]) + ")");
}

if (Worldpositionanchored)
{
    draw_text(mouse_x, mouse_y-12, string(Worldposition[0]) + ", " + string(Worldposition[1]) + " (" + string(Worldportanchor[0]) + ", " + string(Worldportanchor[1]) + ")");
}

var draw_x1 = Worldposition[0]+Worldport[0, 0];
var draw_y1 = Worldposition[1]+Worldport[0, 1];
var draw_x2 = Worldposition[0]+Worldport[1, 0];
var draw_y2 = Worldposition[1]+Worldport[1, 1];

draw_rectangle(draw_x1, draw_y1, draw_x2, draw_y2, true);
draw_rectangle(Worldposition[0], Worldposition[1], Worldposition[0]+(ds_grid_width(World)*16), Worldposition[1]+(ds_grid_height(World)*16), true);
draw_rectangle(Worldposition[0]+0, Worldposition[1]+0, Worldposition[0]+992, Worldposition[1]+720, true);
draw_text(draw_x1, draw_y1-12, string(Worldport[0, 0]) + ", " + string(Worldport[0, 1]) + " (" + string(Worldposition[0]) + ", " + string(Worldposition[1]) + ")");
//draw_text(Worldposition[0] - min(floor((Worldport[0,0] + Worldview[0])/16)*16, 16), Worldposition[1] -  min(floor((Worldport[0,1] + Worldview[1])/16)*16, -16)-32, string(max(ceil((Worldport[0,0]/16)+(Worldview[0]/16)), 0)) + ", 0");
draw_set_halign(fa_right);
draw_text(draw_x2, draw_y2+2, string(Worldport[1, 0]) + ", " + string(Worldport[1, 1]));
//draw_text(Worldposition[0]-Worldview[0]+(ds_grid_width(World)*16), Worldposition[1]-Worldview[1]+(ds_grid_height(World)*16), string(ds_grid_width(World)) + ", " + string(ds_grid_height(World)));
draw_set_halign(fa_left);

//bresenham_line(16, 16, mouse_x, mouse_y);

var debugstring = 
"GMS Collab Project" + "#" +
string(fps) + " / " + string(room_speed) + " (" + string(delta_time/1000) + ")" + "#" +
"State: " + string(state_get(STATE)) +
"#" +
"Worldport[0, 0]" + string(Worldport[0, 0]) + "#" +
"Worldport[0, 1]" + string(Worldport[0, 1]) + "#" +
"Worldport[1, 0]" + string(Worldport[1, 0]) + "#" +
"Worldport[1, 1]" + string(Worldport[1, 1]) + "#" +
"Worldportanchored" + string(Worldportanchored) + "#" +
"Worldportanchor[0, 0]" + string(Worldportanchor[0, 0]) + "#" +
"Worldportanchor[0, 1]" + string(Worldportanchor[0, 1]) + "#" +
"Worldportanchor[1, 0]" + string(Worldportanchor[1, 0]) + "#" +
"Worldportanchor[1, 1]" + string(Worldportanchor[1, 1]) + "#" +
"#" +
"Worldview[0]" + string(Worldview[0]) + "#" +
"Worldview[1]" + string(Worldview[1]) + "#" +
"Worldviewanchored" + string(Worldviewanchored) + "#" +
"Worldviewanchor[0]" + string(Worldviewanchor[0]) + "#" +
"Worldviewanchor[1]" + string(Worldviewanchor[1]) + "#" +
"#" +
"Worldposition[0]" + string(Worldposition[0]) + "#" +
"Worldposition[1]" + string(Worldposition[1]) + "#" +
"Worldpositionanchored" + string(Worldpositionanchored) + "#" +
"Worldpositionanchor[0]" + string(Worldpositionanchor[0]) + "#" +
"Worldpositionanchor[1]" + string(Worldpositionanchor[1]) + "#" +
"#" +
"Pullview" + string(Pullview) + "#" +
"#" +
string(clamp(floor((mouse_x + Worldview[0] - Worldposition[0])/16)-1, 0, ds_grid_width(World))) + "#" +
string(clamp(floor((mouse_y + Worldview[1] - Worldposition[1])/16)-1, 0, ds_grid_height(World))) + "#" +
string(ds_grid_get(Light,
clamp(floor((mouse_x + Worldview[0] - Worldposition[0])/16)-1, 0, ds_grid_width(Light)),
clamp(floor((mouse_y + Worldview[1] - Worldposition[1])/16)-1, 0, ds_grid_height(Light))))
;

draw_set_color(c_black);
draw_set_alpha(0.8);
draw_rectangle(room_width-string_width(debugstring)-4, 0, room_width, string_height(debugstring)+4, false);
draw_set_alpha(1);
draw_set_color(c_white);
draw_set_halign(fa_right);
draw_text(room_width-2, 2, debugstring);
draw_set_halign(fa_left);

draw_set_color(original_color)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
