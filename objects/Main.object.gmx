<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
draw_set_font(Font);

// temp player
player_x = room_width/2;
player_y = room_height/2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tiles
Tiles = wtile_init();
var surface = wtile_begin();

wtile_add(Tiles, surface, false, "floor", "this is the floor");

wtile_add_all(Tiles, surface);

wtile_end(surface);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///World
World = ds_grid_create(45, 45);

for (var i = 0; i &lt; 45; ++i)
{
    for (var j = 0; j &lt; 45; ++j)
    {
        ds_grid_add(World, i, j, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_check_button_pressed(mb_middle))
{
    var mouse_xx = floor(mouse_x/16);
    var mouse_yy = floor(mouse_y/16);
    ds_grid_set(World, mouse_xx, mouse_yy, irandom(ds_list_size(Tiles)-1));//(ds_grid_get(World, mouse_xx, mouse_yy)+1) % ds_list_size(Tiles));
}

if (mouse_check_button_pressed(mb_left))
{
    var mouse_xx = floor(mouse_x/16);
    var mouse_yy = floor(mouse_y/16);
    ds_grid_set(World, mouse_xx, mouse_yy, (ds_grid_get(World, mouse_xx, mouse_yy)+1) % ds_list_size(Tiles));
}

if (mouse_check_button_pressed(mb_right))
{
    var mouse_xx = floor(mouse_x/16);
    var mouse_yy = floor(mouse_y/16);
    ds_grid_set(World, mouse_xx, mouse_yy, abs((ds_grid_get(World, mouse_xx, mouse_yy)-1) % (0-ds_list_size(Tiles))));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// tiles
//draw_sprite_tiled(ds_list_find_value(ds_list_find_value(Tiles, 0), 1), 0, 0, 0);


// player
player_x += (keyboard_check(ord("D"))-keyboard_check(ord("A")))*4;
player_y += (keyboard_check(ord("S"))-keyboard_check(ord("W")))*4;

draw_sprite(ds_list_find_value(ds_list_find_value(Tiles, 1), 1), 0, player_x, player_y);

// GUI
var gui_xx = room_height*1.4;
draw_rectangle(gui_xx, 0, room_width, room_height, false);

var default_color = draw_get_color();

for (var i = 0; i &lt; ds_grid_width(World); ++i)
{
    for (var j = 0; j &lt; ds_grid_height(World); ++j)
    {
        var tile_color = ds_list_find_value(ds_list_find_value(Tiles, ds_grid_get(World, i, j)), 0);
        draw_set_color(make_colour_hsv((tile_color/ds_list_size(Tiles))*255, 255, 255));
        draw_rectangle(gui_xx+4+(i*4), 0+4+(j*4), gui_xx+4+(i*4)+4, 0+4+(j*4)+4, false);
    }
}

draw_set_color(default_color);

// text
draw_set_halign(fa_right);
draw_text_outlined(room_width-2, 2, "GMS Collab Project", c_white, 1, c_black);

for (var i = 0; i &lt; ds_list_size(Tiles); ++i)
{
    draw_sprite(ds_list_find_value(ds_list_find_value(Tiles, i), 1), 0, room_width-16-2, 2+((i+1)*16));
    draw_text_outlined(room_width-2-16-2, 2+((i+1)*16), ds_list_find_value(ds_list_find_value(Tiles, i), 3), c_white, 1, c_black);
}
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///World
for (var i = 0; i &lt; ds_grid_width(World); ++i)
{
    for (var j = 0; j &lt; ds_grid_height(World); ++j)
    {
        draw_sprite(ds_list_find_value(ds_list_find_value(Tiles, ds_grid_get(World, i, j)), 1), 0, i*16, j*16);
        //draw_text(i*16, j*16, (ds_list_find_value(ds_list_find_value(Tiles, ds_grid_get(World, i, j)), 0)/ds_list_size(Tiles))*255);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
